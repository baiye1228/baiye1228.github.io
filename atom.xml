<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>李花太白的博客</title>
  
  <subtitle>我的眼里只有你</subtitle>
  <link href="http://baiye1228.github.io/atom.xml" rel="self"/>
  
  <link href="http://baiye1228.github.io/"/>
  <updated>2020-10-27T11:37:32.196Z</updated>
  <id>http://baiye1228.github.io/</id>
  
  <author>
    <name>白也</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python学习笔记2之运算符</title>
    <link href="http://baiye1228.github.io/2020/10/27/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02%E4%B9%8B%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>http://baiye1228.github.io/2020/10/27/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02%E4%B9%8B%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2020-10-27T11:33:29.000Z</published>
    <updated>2020-10-27T11:37:32.196Z</updated>
    
    <content type="html"><![CDATA[<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>python语言支持以下类型的运算符:<a id="more"></a></p><ul><li>算术运算符</li><li>比较运算符</li><li>赋值运算符</li><li>逻辑运算符</li><li>位运算符</li><li>成员运算符</li><li>身份运算符</li><li>运算符优先级</li></ul><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>加减乘除 取余 +，-，*，/，%不必多说。扩展的算术运算符如下：</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>**</td><td>返回x的y次幂</td></tr><tr><td>//</td><td>取整，向下取接近商的整数</td></tr></tbody></table><p><strong>实例：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">a=8</span><br><span class="line">b=2</span><br><span class="line">result=a*b</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;乘法运算：&#x27;</span>,result)</span><br><span class="line"></span><br><span class="line">result=a/b</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;除法运算：&#x27;</span>,result)</span><br><span class="line"></span><br><span class="line">b=3</span><br><span class="line">result=a**b</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#x27;**&#x27;运算：&quot;</span>,result)  <span class="comment"># b=3  a=8  result=8*8*8=512</span></span><br><span class="line"></span><br><span class="line">result=a//b</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#x27;//&#x27;运算：&quot;</span>,result) <span class="comment">#取整：2</span></span><br><span class="line"></span><br><span class="line">result=a%b</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#x27;%&#x27;运算：&quot;</span>,result) <span class="comment">#取余：2</span></span><br></pre></td></tr></table></figure><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>以下假设<strong>a=1,b=2</strong>:</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>==</td><td>等于-比较对象是否相等</td><td>(a == b) 返回 False。</td></tr><tr><td>!=</td><td>不等于 - 比较两个对象是否不相等</td><td>(a != b) 返回 True。</td></tr><tr><td>&gt;</td><td>大于 - 返回x是否大于y</td><td>(a &gt; b) 返回 False。</td></tr><tr><td>&lt;</td><td>小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。</td><td>(a &lt; b) 返回 True。</td></tr><tr><td>&gt;=</td><td>大于等于 - 返回x是否大于等于y。</td><td>(a &gt;= b) 返回 False。</td></tr><tr><td>&lt;=</td><td>小于等于 - 返回x是否小于等于y</td><td>(a &lt;= b) 返回 True。</td></tr></tbody></table><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>以下假设<strong>a=10,b=20</strong>:</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>=</td><td>简单的赋值运算符</td><td>c = a + b 将 a + b 的运算结果赋值为 c</td></tr><tr><td>+=</td><td>加法赋值运算符</td><td>c += a 等效于 c = c + a</td></tr><tr><td>-=</td><td>减法赋值运算符</td><td>c -= a 等效于 c = c - a</td></tr><tr><td>*=</td><td>乘法赋值运算符</td><td>c *= a 等效于 c = c * a</td></tr><tr><td>/=</td><td>除法赋值运算符</td><td>c /= a 等效于 c = c / a</td></tr><tr><td>%=</td><td>取模赋值运算符</td><td>c %= a 等效于 c = c % a</td></tr><tr><td>**=</td><td>幂赋值运算符</td><td>c **= a 等效于 c = c ** a</td></tr><tr><td>//=</td><td>取整除赋值运算符</td><td>c //= a 等效于 c = c // a</td></tr><tr><td>:=</td><td>海象运算符，可在表达式内部为变量赋值。Python3.8 版本新增运算符。</td><td>在这个示例中，赋值表达式可以避免调用 len() 两次:if (n := len(a)) &gt; 10</td></tr></tbody></table><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td></tr><tr><td>|</td><td>按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。</td></tr><tr><td>^</td><td>按位异或运算符：当两对应的二进位相异时，结果为1</td></tr><tr><td>~</td><td>按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。~x 类似于 -x-1</td></tr><tr><td>&gt;&gt;</td><td>左移动运算符：运算数的各二进位全部左移若干位，由”&lt;&lt;”右边的数指定移动的位数，高位丢弃，低位补0。</td></tr><tr><td>&lt;&lt;</td><td>右移动运算符：把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，”&gt;&gt;”右边的数指定移动的位数</td></tr></tbody></table><p>代码实例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(3 &amp; 2)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">类似and</span></span><br><span class="line"><span class="string">1 True  0  False</span></span><br><span class="line"><span class="string">   0000 0011</span></span><br><span class="line"><span class="string">&amp;  0000 0010</span></span><br><span class="line"><span class="string">--------------</span></span><br><span class="line"><span class="string">   0000 0010</span></span><br><span class="line"><span class="string">&#x27;</span><span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(5|3)   <span class="comment">#  | 类似or</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(~5)    <span class="comment"># 取反  将十进制对应的二进制进行取反操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 异或  ^    相同为0   不同为1</span></span><br><span class="line"><span class="built_in">print</span>(3^5)</span><br><span class="line"><span class="string">&#x27;&#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">3  0000 0011</span></span><br><span class="line"><span class="string">5  0000 0101</span></span><br><span class="line"><span class="string">-------------</span></span><br><span class="line"><span class="string">   0000 0110</span></span><br><span class="line"><span class="string">&#x27;</span><span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#左移乘2^n     右移除2^n</span></span><br><span class="line"><span class="built_in">print</span>(2&lt;&lt;1) <span class="comment"># 4</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>以下假设<strong>a=10,b=20</strong>:</p><table><thead><tr><th>运算符</th><th>逻辑表达式</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>and</td><td>x and y</td><td>布尔”与” - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。</td><td>(a and b) 返回 20</td></tr><tr><td>or</td><td>x or y</td><td>布尔”或” - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值</td><td>(a or b) 返回 10</td></tr><tr><td>not</td><td>not x</td><td>布尔”非” - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True</td><td>not(a and b) 返回 False</td></tr></tbody></table><h3 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h3><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>in</td><td>如果在指定的序列中找到值返回 True，否则返回 False。</td><td>x 在 y 序列中 , 如果 x 在 y 序列中返回 True。</td></tr><tr><td>not in</td><td>如果在指定的序列中没有找到值返回 True，否则返回 False。</td><td>x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True</td></tr></tbody></table><h3 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h3><p>身份运算符用于比较两个对象的存储单元<br>|运算符|描述|实例|<br>|—|—|—|<br>|is|is 是判断两个标识符是不是引用自一个对象 | x is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False|<br>|not is| is not 是判断两个标识符是不是引用自不同对象|x is not y ， 类似 id(a) != id(b)。如果引用的不是同一个对象则返回结果 True，否则返回 False。 |</p><h3 id="运算优先级"><a href="#运算优先级" class="headerlink" title="运算优先级"></a>运算优先级</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>**</td><td>指数 (最高优先级)</td></tr><tr><td>~ + -</td><td>按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td></tr><tr><td>* / % //</td><td>乘，除，求余数和取整除</td></tr><tr><td>+ -</td><td>加法减法</td></tr><tr><td>&gt;&gt; &lt;&lt;</td><td>右移，左移运算符</td></tr><tr><td>&amp;</td><td>位 ‘AND’</td></tr><tr><td>^|</td><td>位运算符</td></tr><tr><td>&lt;= &lt; &gt; &gt;=</td><td>比较运算符</td></tr><tr><td>== !=</td><td>等于运算符</td></tr><tr><td>= %= /= //= -= += *= **</td><td>赋值运算符</td></tr><tr><td>is is not</td><td>身份运算符</td></tr><tr><td>in not in</td><td>成员运算符</td></tr><tr><td>not and or</td><td>逻辑运算符</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;运算符&quot;&gt;&lt;a href=&quot;#运算符&quot; class=&quot;headerlink&quot; title=&quot;运算符&quot;&gt;&lt;/a&gt;运算符&lt;/h2&gt;&lt;p&gt;python语言支持以下类型的运算符:&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="http://baiye1228.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="python" scheme="http://baiye1228.github.io/tags/python/"/>
    
    <category term="笔记" scheme="http://baiye1228.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>python学习笔记1之变量及输入输出</title>
    <link href="http://baiye1228.github.io/2020/10/20/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01%E4%B9%8B%E5%8F%98%E9%87%8F%E5%8F%8A%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/"/>
    <id>http://baiye1228.github.io/2020/10/20/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01%E4%B9%8B%E5%8F%98%E9%87%8F%E5%8F%8A%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</id>
    <published>2020-10-20T12:48:52.000Z</published>
    <updated>2020-10-20T12:50:41.461Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一个程序"><a href="#第一个程序" class="headerlink" title="第一个程序"></a>第一个程序</h2><p>在C++中我所认识到的第一个程序，也是所有学习编程语言第一个编写到的程序“hello world”，<a id="more"></a>下面是C++中实现的代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">int <span class="function"><span class="title">main</span></span>()&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;hello world&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而这一程序在python中仅需一行代码，代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br></pre></td></tr></table></figure><p>从这一程序其实就能窥见python编写的简单。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>在程序设计中，变量是一种存储数据的载体。计算机中的变量是实际存在的数据或者说是存储器中存储数据的一块内存空间，变量的值可以被读取和修改，这是所有计算和控制的基础。</p><h3 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h3><p>变量命名规则：</p><pre><code>1.变量名只能是字母，数字和下划线的任意组合2.变量名第一个字符不能是数字3.变量名区分大小写，大小写字母被认为是两个不同的字符4.特殊关键字不能命名为变量名</code></pre><p>python中我们不能将特殊的关键字用作任何变量名称，也就是有那么多名字可以起，别盯着这些有特殊功能的关键字不放。python 的标准库提供了一个 keyword 模块，可以输出当前版本的所有关键字：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import keyword</span><br><span class="line">&gt;&gt;&gt; keyword.kwlist</span><br><span class="line">[<span class="string">&#x27;False&#x27;</span>, <span class="string">&#x27;None&#x27;</span>, <span class="string">&#x27;True&#x27;</span>, <span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;as&#x27;</span>, <span class="string">&#x27;assert&#x27;</span>, <span class="string">&#x27;break&#x27;</span>, <span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;continue&#x27;</span>, <span class="string">&#x27;def&#x27;</span>, <span class="string">&#x27;del&#x27;</span>, <span class="string">&#x27;elif&#x27;</span>, <span class="string">&#x27;else&#x27;</span>, <span class="string">&#x27;except&#x27;</span>, <span class="string">&#x27;finally&#x27;</span>, <span class="string">&#x27;for&#x27;</span>, <span class="string">&#x27;from&#x27;</span>, <span class="string">&#x27;global&#x27;</span>, <span class="string">&#x27;if&#x27;</span>, <span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;in&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;lambda&#x27;</span>, <span class="string">&#x27;nonlocal&#x27;</span>, <span class="string">&#x27;not&#x27;</span>, <span class="string">&#x27;or&#x27;</span>, <span class="string">&#x27;pass&#x27;</span>, <span class="string">&#x27;raise&#x27;</span>, <span class="string">&#x27;return&#x27;</span>, <span class="string">&#x27;try&#x27;</span>, <span class="string">&#x27;while&#x27;</span>, <span class="string">&#x27;with&#x27;</span>, <span class="string">&#x27;yield&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="创建变量"><a href="#创建变量" class="headerlink" title="创建变量"></a>创建变量</h3><p>与其他编程语言不同，Python 没有声明变量的命令。首次为其赋值时，才会创建变量。<br><strong>实例：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x=10</span><br><span class="line">y=<span class="string">&#x27;Tom&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure><p>变量不需要使用任何特定类型声明，甚至可以在设置后更改其类型。<strong>实例：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = 5 <span class="comment"># x is of type int</span></span><br><span class="line">x = <span class="string">&quot;Steve&quot;</span> <span class="comment"># x is now of type str</span></span><br></pre></td></tr></table></figure><p>字符串变量可以使用单引号或双引号进行声明。<strong>实例：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">&quot;Tom&quot;</span></span><br><span class="line"><span class="comment"># is the same as</span></span><br><span class="line">y = <span class="string">&#x27;Tom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(id(x))</span><br><span class="line"><span class="built_in">print</span>(id(y))</span><br></pre></td></tr></table></figure><p>运行上述实例，我们可以发现两个变量的地址是一模一样的。</p><h3 id="向多个变量赋值"><a href="#向多个变量赋值" class="headerlink" title="向多个变量赋值"></a>向多个变量赋值</h3><p>python 允许您在一行中为多个变量赋值。<strong>实例：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x, y, z = <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Cherry&quot;</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="built_in">print</span>(z)</span><br></pre></td></tr></table></figure><p>也可以在一行中为多个变量分配相同的值。<strong>实例：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = y = z = <span class="string">&quot;Orange&quot;</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="built_in">print</span>(z)</span><br></pre></td></tr></table></figure><h2 id="输出之print-函数"><a href="#输出之print-函数" class="headerlink" title="输出之print()函数"></a>输出之print()函数</h2><p><strong>print()</strong> 方法用于打印输出，最常见的一个函数。</p><h3 id="print函数语法"><a href="#print函数语法" class="headerlink" title="print函数语法"></a>print函数语法</h3><p>以下是 print() 方法的语法:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(object(s), separator=separator, end=end, file=file, flush=flush)</span><br></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>object(s)</td><td>任何对象，以及任意数量。打印前将转换为字符串。</td></tr><tr><td>sep=’separator’</td><td>可选。指定如何分隔对象，如果存在多个对象。默认值为 ‘ ‘。</td></tr><tr><td>end=’end’</td><td>可选。可选的。指定要在末尾打印的内容。默认值为 ‘\n’（换行符）。</td></tr><tr><td>file</td><td>可选。有写入方法的对象。默认为 sys.stdout。</td></tr><tr><td>flush</td><td>可选的。布尔值，指定输出是刷新（True）还是缓冲（False）。默认为 False。</td></tr></tbody></table><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(1)  </span><br><span class="line">1  </span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(<span class="string">&quot;Hello World&quot;</span>)  </span><br><span class="line">Hello World  </span><br><span class="line"> </span><br><span class="line">&gt;&gt;&gt; a = 1</span><br><span class="line">&gt;&gt;&gt; b = <span class="string">&#x27;runoob&#x27;</span></span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(a,b)</span><br><span class="line">1 runoob</span><br><span class="line"> </span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(<span class="string">&quot;aaa&quot;</span><span class="string">&quot;bbb&quot;</span>)</span><br><span class="line">aaabbb</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;bbb&quot;</span>)</span><br><span class="line">aaa bbb</span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line"> </span><br><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(<span class="string">&quot;www&quot;</span>,<span class="string">&quot;runoob&quot;</span>,<span class="string">&quot;com&quot;</span>,sep=<span class="string">&quot;.&quot;</span>)  <span class="comment"># 设置间隔符</span></span><br><span class="line">www.runoob.com</span><br></pre></td></tr></table></figure><h2 id="输入之input-函数"><a href="#输入之input-函数" class="headerlink" title="输入之input()函数"></a>输入之input()函数</h2><p>Python3.x 中 input() 函数接受一个标准输入数据，返回为 string 类型。也就是说通过这一函数输入的任何信息都是string类型，如需要其他类型则要进行强制转换。</p><h3 id="input函数语法"><a href="#input函数语法" class="headerlink" title="input函数语法"></a>input函数语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">input([prompt])</span><br></pre></td></tr></table></figure><p>prompt: 执行输入时的提示信息。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>想了一会儿，这一系列不是教程，而是对以前学习的一个总结，帮助自己，或是别人查缺补漏，所以尽量不多说废话。当然，会穿插自己对某些知识点的看法。编程的路远，唯有坚持！！</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;第一个程序&quot;&gt;&lt;a href=&quot;#第一个程序&quot; class=&quot;headerlink&quot; title=&quot;第一个程序&quot;&gt;&lt;/a&gt;第一个程序&lt;/h2&gt;&lt;p&gt;在C++中我所认识到的第一个程序，也是所有学习编程语言第一个编写到的程序“hello world”，&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="http://baiye1228.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="python" scheme="http://baiye1228.github.io/tags/python/"/>
    
    <category term="笔记" scheme="http://baiye1228.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>python初识感想</title>
    <link href="http://baiye1228.github.io/2020/10/11/python%E5%88%9D%E8%AF%86%E6%84%9F%E6%83%B3/"/>
    <id>http://baiye1228.github.io/2020/10/11/python%E5%88%9D%E8%AF%86%E6%84%9F%E6%83%B3/</id>
    <published>2020-10-11T03:51:20.000Z</published>
    <updated>2020-10-11T04:00:52.093Z</updated>
    
    <content type="html"><![CDATA[<h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>因为一开始接触的是C/C++，所以在学习python的过程中，我很自然的将两者进行对比，现阶段的感受就是python像是C++的简单版本。</p><a id="more"></a><p>我喜欢将python的编写看成是一个搭“积木”的过程，基础语法是连接每块“积木”的小零件，python中所包含的模块，第三方库就是一个个前辈帮忙制作的“积木”，每一个“积木”有着不同的“接口”——函数，我们通过使用语法来连接这些“接口”，从而实现我们所需要的功能。</p><img src="/2020/10/11/python%E5%88%9D%E8%AF%86%E6%84%9F%E6%83%B3/wallhaven-oxro8m_1920x1080.png" class title="我的世界"><p>同样python与《我的世界》这款游戏非常的相似，《我的世界》除了原版的玩法之外，还有各路大神制作的各种mod，这些mod为玩家提供了不同且丰富多样玩法。我们反观python，是不是非常的相像？</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>当然，编程的道路对我来说是一个对其认知不断改变的过程，随着后续的学习，先前的理解可能就会显得不是那么的形象贴切，但这并不影响我将之简单化看待的心，所以不必只拘泥一种思考，有觉得更好的思考及理解拿来用便是。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;感想&quot;&gt;&lt;a href=&quot;#感想&quot; class=&quot;headerlink&quot; title=&quot;感想&quot;&gt;&lt;/a&gt;感想&lt;/h2&gt;&lt;p&gt;因为一开始接触的是C/C++，所以在学习python的过程中，我很自然的将两者进行对比，现阶段的感受就是python像是C++的简单版本。&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="http://baiye1228.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="python" scheme="http://baiye1228.github.io/tags/python/"/>
    
    <category term="随笔" scheme="http://baiye1228.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
